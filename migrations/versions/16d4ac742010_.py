"""empty message

Revision ID: 16d4ac742010
Revises: 3b8b5077e05c
Create Date: 2022-11-18 12:39:05.237995

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import engine_from_config
from sqlalchemy.engine import reflection

# revision identifiers, used by Alembic.
revision = '16d4ac742010'
down_revision = '3b8b5077e05c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###



    # renaming events
    op.alter_column('events', 'event_date', new_column_name='date')
    op.alter_column('events',
                    'event_description',
                    new_column_name='description')
    op.alter_column('events', 'event_location', new_column_name='location')
    op.alter_column('events', 'event_start_time', new_column_name='start_time')
    op.alter_column('events', 'event_end_time', new_column_name='end_time')
    op.alter_column('events', 'event_name', new_column_name='name')
    op.alter_column('events', 'user_id', new_column_name='creator_id')



    op.rename_table('users', 'old_users') # renaming it so the new users table can fit right in

    # defining a new users table and copying the data over
    new_users_table = op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False, primary_key=True),
        sa.Column('email_address', sa.String(length=120), nullable=False),
        sa.Column('password', sa.String(length=120), nullable=False),
        sa.Column('first_name', sa.String(length=120), nullable=False),
        sa.Column('last_name', sa.String(length=120), nullable=False),
        sa.Column(
            'team_auth_key', sa.String(length=10), nullable=False, default='0'
        ),  # a special key sent out by the team to allow access to the site
        sa.Column('is_admin', sa.SmallInteger(), nullable=False, default=0),
        sa.Column('pool_points', sa.Float, default=0.0, nullable=False),
        sa.Column('email_address', sa.String(), nullable=False),
        sa.Column('student_or_parent', sa.String(), nullable=True),
        sa.Column('phone_number', sa.String(), nullable=False),
        sa.Column('emergency_contact_number', sa.String(), nullable=True),
        sa.Column('emergency_contact_relation', sa.String(),
                  nullable=True),  # will be set later
        sa.Column('extra_information', sa.String(length=200), nullable=True),
        sa.Column('region_name',
                  sa.String(length=40),
                  sa.ForeignKey('regions.name'),
                  nullable=True),
        sa.Column('num_seats', sa.Integer(), nullable=True),
        sa.Column('num_years_with_license', sa.String(), nullable=True),
        sa.Column('car_type_1', sa.String(), nullable=True),
        sa.Column('car_color_1', sa.String(), nullable=True),
        sa.Column('car_type_2', sa.String(), nullable=True),
        sa.Column('car_color_2', sa.String(), nullable=True),
    )

    # moving the data from the old users table to the new users table
    conn = op.get_bind()
    old_users = conn.execute(
        """SELECT old_users.id,
         passengers.email_address, 
         old_users.password, 
         old_users.first_name,
          old_users.last_name,
           old_users.team_auth_key,
            old_users.is_admin,
             old_users.pool_points,
              drivers.student_or_parent,
               passengers.phone_number,
                passengers.emergency_contact_number,
                 passengers.emergency_contact_relation, 
                 passengers.extra_information, 
                 passengers.region_name,
                  drivers.num_seats, 
                  drivers.num_years_with_license, 
                  drivers.car_type_1, 
                  drivers.car_color_1, 
                  drivers.car_type_2, 
                  drivers.car_color_2
    FROM ((old_users 
    LEFT JOIN drivers ON old_users.driver_id = drivers.index) 
    INNER JOIN passengers ON old_users.passenger_id = passengers.index)
    """)
    old_users = old_users.fetchall()
    new_users = []
    for user in old_users:
        new_users.append({
            'id': user[0],
            'email_address': user[1],
            'password': user[2],
            'first_name': user[3],
            'last_name': user[4],
            'team_auth_key': user[5],
            'is_admin': user[6],
            'pool_points': user[7],
            'student_or_parent': user[8],
            'phone_number': user[9],
            'emergency_contact_number': user[10],
            'emergency_contact_relation': user[11],
            'extra_information': user[12],
            'region_name': user[13],
            'num_seats': user[14],
            'num_years_with_license': user[15],
            'car_type_1': user[16],
            'car_color_1': user[17],
            'car_type_2': user[18],
            'car_color_2': user[19],
        })

    op.bulk_insert(new_users_table, new_users)

    print(new_users_table)

    # handling addresses
    op.drop_constraint('addresses_driver_id_fkey',
                       'addresses',
                       type_='foreignkey')
    op.drop_constraint('addresses_passenger_id_fkey',
                       'addresses',
                       type_='foreignkey')

    # moving data from the keys 
    
    op.drop_column('addresses', 'driver_id')
    op.drop_column('addresses', 'passenger_id')

    # will fix this later
    
    # getting the new foreign keys

    # dict -- tablename: [oldname, newname]
    tables_to_change_foreign_keys_passengers = {'event_carpool_signups': ['passenger_id', 'user_id'], 
                                                'passenger_carpool_links': ['passenger_id', 'user_id'],
                                                'passenger_event_links': ['passenger_id', 'user_id'],
                                                'generated_carpool_part_passenger_links': ['passenger_id', 'user_id'],
                                                'generated_carpool_passenger_links': ['passenger_id', 'user_id'],
                                                }
                    
    tables_to_change_foreign_keys_drivers = {'generated_carpool_parts': ['driver_id', 'driver_id'],
                                                'generated_carpools': ['driver_id', 'driver_id'],
                                                'carpools': ['driver_index', 'driver_index'],
                                                }
    # address is not included because it is turning into many to many: more on that later

    

    # def has_column(table_name, column_name):
    #     print('starting has column')
    #     has_column=False
    #     config = op.get_context().config
    #     engine= engine_from_config(config.get_section(config.config_ini_section), prefix='sqlalchemy.')
    #     insp = reflection.Inspector.from_engine(engine)
    #     for col in insp.get_columns(table_name):
    #         if col['name'] == column_name:
    #             has_column=True
    #     print('has_column', has_column)
    #     return has_column

    # changing the foreign keys
    for table, names in tables_to_change_foreign_keys_passengers.items():
        print('starting table', table)
        op.drop_constraint(f'{table}_{names[0]}_fkey',
                           table,
                           type_='foreignkey')
        op.add_column(table, sa.Column(f'{names[1]}', sa.Integer(), nullable=True, unique=True))

        op.execute(f"""
        UPDATE {table}
        SET {names[1]} = old_users.id
        FROM old_users
        WHERE {table}.{names[0]} = old_users.passenger_id
        """)
        
        op.create_foreign_key(None, table, 'users', [f'{names[1]}'], ['id'])
        op.drop_column(table, 'passenger_id')
    

    for table, names in tables_to_change_foreign_keys_drivers.items():
        op.drop_constraint(f'{table}_{names[0]}_fkey',
                           table,
                           type_='foreignkey')
        op.alter_column(table, names[1], new_column_name='old_column')
        op.add_column(table, sa.Column(f'{names[1]}', sa.Integer(), nullable=True, unique=True))
        op.execute(f"""
        UPDATE {table}
        SET {names[1]} = old_users.id
        FROM old_users
        WHERE {table}.old_column = old_users.driver_id;
        """)
        op.create_foreign_key(None, table, 'users', [names[1]], ['id'])
        op.drop_column(table, 'old_column')

    # need to create table here so it connects to the new table
    op.create_table(
        'address_user_links',
        sa.Column('address_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['address_id'],
            ['addresses.id'],
        ), sa.ForeignKeyConstraint(
            ['user_id'],
            ['users.id'],
        ), sa.PrimaryKeyConstraint('address_id', 'user_id'))

    # moving the keys that depended on the old users table
    op.drop_constraint('generated_carpool_response_user_id_fkey', 'generated_carpool_response', type_='foreignkey')
    op.create_foreign_key('generated_carpool_response_user_id_fkey', 'generated_carpool_response', 'users', ['user_id'], ['id'])
    op.drop_constraint('event_sign_ups_user_id_fkey', 'event_sign_ups', type_='foreignkey')
    op.create_foreign_key('event_sign_ups_user_id_fkey', 'event_sign_ups', 'users', ['user_id'], ['id'])
    op.drop_constraint('events_user_id_fkey', 'events', type_='foreignkey')
    op.create_foreign_key('events_user_id_fkey', 'events', 'users', ['creator_id'], ['id'])
    op.drop_constraint('generated_carpool_response_passenger_id_fkey', 'generated_carpool_response', type_='foreignkey')
    op.create_foreign_key('generated_carpool_response_passenger_id_fkey', 'generated_carpool_response', 'users', ['passenger_id'], ['id'])
    




    # dropping the tables
    op.drop_table('old_users')
    op.drop_table('drivers')
    op.drop_table('passengers')
    # ### end Alembic commands ###


def downgrade():

    op.alter_column('events', 'date', new_column_name='event_date')
    op.alter_column('events',
                    'description',
                    new_column_name='event_description')
    op.alter_column('events', 'location', new_column_name='event_location')
    op.alter_column('events', 'start_time', new_column_name='event_start_time')
    op.alter_column('events', 'end_time', new_column_name='event_end_time')
    op.alter_column('events', 'name', new_column_name='event_name')
    op.alter_column('events', 'user_id', new_column_name='event_creator_id')

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'users',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=False))
    op.add_column(
        'users',
        sa.Column('driver_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('users_driver_id_fkey', 'users', 'drivers',
                          ['driver_id'], ['index'])
    op.create_foreign_key('users_passenger_id_fkey', 'users', 'passengers',
                          ['passenger_id'], ['index'])
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'car_color_2')
    op.drop_column('users', 'car_type_2')
    op.drop_column('users', 'car_color_1')
    op.drop_column('users', 'car_type_1')
    op.drop_column('users', 'num_years_with_license')
    op.drop_column('users', 'num_seats')
    op.drop_column('users', 'region_name')
    op.drop_column('users', 'extra_information')
    op.drop_column('users', 'emergency_contact_relation')
    op.drop_column('users', 'emergency_contact_number')
    op.drop_column('users', 'phone_number')
    op.drop_column('users', 'student_or_parent')
    op.drop_column('users', 'email_address')
    op.add_column(
        'passenger_event_links',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True))
    op.drop_constraint(None, 'passenger_event_links', type_='foreignkey')
    op.create_foreign_key('passenger_event_links_passenger_id_fkey',
                          'passenger_event_links', 'passengers',
                          ['passenger_id'], ['index'])
    op.drop_column('passenger_event_links', 'user_id')
    op.add_column(
        'passenger_carpool_links',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True))
    op.drop_constraint(None, 'passenger_carpool_links', type_='foreignkey')
    op.create_foreign_key('passenger_carpool_links_passenger_id_fkey',
                          'passenger_carpool_links', 'passengers',
                          ['passenger_id'], ['index'])
    op.drop_column('passenger_carpool_links', 'user_id')
    op.drop_constraint(None, 'generated_carpools', type_='foreignkey')
    op.create_foreign_key('generated_carpools_driver_id_fkey',
                          'generated_carpools', 'drivers', ['driver_id'],
                          ['index'])
    op.add_column(
        'generated_carpool_response',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True))
    op.create_foreign_key('generated_carpool_response_passenger_id_fkey',
                          'generated_carpool_response', 'passengers',
                          ['passenger_id'], ['index'])
    op.add_column(
        'generated_carpool_passenger_links',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=False))
    op.drop_constraint(None,
                       'generated_carpool_passenger_links',
                       type_='foreignkey')
    op.create_foreign_key(
        'generated_carpool_passenger_links_passenger_id_fkey',
        'generated_carpool_passenger_links', 'passengers', ['passenger_id'],
        ['index'])
    op.drop_column('generated_carpool_passenger_links', 'user_id')
    op.drop_constraint(None, 'generated_carpool_parts', type_='foreignkey')
    op.create_foreign_key('generated_carpool_parts_driver_id_fkey',
                          'generated_carpool_parts', 'drivers', ['driver_id'],
                          ['index'])
    op.add_column(
        'generated_carpool_part_passenger_links',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=False))
    op.drop_constraint(None,
                       'generated_carpool_part_passenger_links',
                       type_='foreignkey')
    op.create_foreign_key(
        'generated_carpool_part_passenger_links_passenger_id_fkey',
        'generated_carpool_part_passenger_links', 'passengers',
        ['passenger_id'], ['index'])
    op.drop_column('generated_carpool_part_passenger_links', 'user_id')
    op.add_column(
        'events',
        sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column(
        'events',
        sa.Column('event_name',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False))
    op.add_column(
        'events',
        sa.Column('event_end_time',
                  postgresql.TIMESTAMP(),
                  autoincrement=False,
                  nullable=False))
    op.add_column(
        'events',
        sa.Column('event_start_time',
                  postgresql.TIMESTAMP(),
                  autoincrement=False,
                  nullable=False))
    op.add_column(
        'events',
        sa.Column('event_location',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False))
    op.add_column(
        'events',
        sa.Column('event_description',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True))
    op.add_column(
        'events',
        sa.Column('event_date',
                  postgresql.TIMESTAMP(),
                  autoincrement=False,
                  nullable=False))
    op.drop_constraint(None, 'events', type_='foreignkey')
    op.create_foreign_key('events_user_id_fkey', 'events', 'users',
                          ['user_id'], ['id'])
    op.drop_column('events', 'creator_id')
    op.drop_column('events', 'description')
    op.drop_column('events', 'location')
    op.drop_column('events', 'end_time')
    op.drop_column('events', 'start_time')
    op.drop_column('events', 'date')
    op.drop_column('events', 'name')
    op.add_column(
        'event_carpool_signups',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=False))
    op.drop_constraint(None, 'event_carpool_signups', type_='foreignkey')
    op.create_foreign_key('event_carpool_signups_passenger_id_fkey',
                          'event_carpool_signups', 'passengers',
                          ['passenger_id'], ['index'])
    op.drop_column('event_carpool_signups', 'user_id')
    op.drop_constraint(None, 'carpools', type_='foreignkey')
    op.create_foreign_key('carpools_driver_index_fkey', 'carpools', 'drivers',
                          ['driver_index'], ['index'])
    op.add_column(
        'addresses',
        sa.Column('passenger_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True))
    op.add_column(
        'addresses',
        sa.Column('driver_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True))
    op.create_foreign_key('addresses_passenger_id_fkey', 'addresses',
                          'passengers', ['passenger_id'], ['index'])
    op.create_foreign_key('addresses_driver_id_fkey', 'addresses', 'drivers',
                          ['driver_id'], ['index'])
    op.create_table(
        'passengers',
        sa.Column('index', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('last_name',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('first_name',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('phone_number',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('email_address',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('emergency_contact_number',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('emergency_contact_relation',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('extra_information',
                  sa.VARCHAR(length=200),
                  autoincrement=False,
                  nullable=True),
        sa.Column('region_name',
                  sa.VARCHAR(length=40),
                  autoincrement=False,
                  nullable=True),
        sa.Column('address_line_1',
                  sa.VARCHAR(length=50),
                  autoincrement=False,
                  nullable=True),
        sa.Column('address_line_2',
                  sa.VARCHAR(length=50),
                  autoincrement=False,
                  nullable=True),
        sa.Column('city',
                  sa.VARCHAR(length=20),
                  autoincrement=False,
                  nullable=True),
        sa.Column('zip_code',
                  sa.VARCHAR(length=12),
                  autoincrement=False,
                  nullable=True),
        sa.ForeignKeyConstraint(['region_name'], ['regions.name'],
                                name='passengers_region_name_fkey'),
        sa.PrimaryKeyConstraint('index', name='passengers_pkey'))
    op.create_table(
        'drivers',
        sa.Column('index', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('last_name',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('first_name',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('num_seats',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('phone_number',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('email_address',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('student_or_parent',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('num_years_with_license',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('car_type_1',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('car_color_1',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('car_type_2',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('car_color_2',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('emergency_contact_number',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('emergency_contact_relation',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=False),
        sa.Column('extra_information',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('region_name',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('address_line_1',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('address_line_2',
                  sa.VARCHAR(),
                  autoincrement=False,
                  nullable=True),
        sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('zip_code', sa.VARCHAR(), autoincrement=False,
                  nullable=True),
        sa.ForeignKeyConstraint(['region_name'], ['regions.name'],
                                name='drivers_region_name_fkey'),
        sa.PrimaryKeyConstraint('index', name='drivers_pkey'))
    op.drop_table('address_user_links')
    # ### end Alembic commands ###
